name: 'Setup Spoo.me Service'
description: 'Run spoo.me URL shortener service locally with MongoDB, Redis, and all dependencies'
author: 'spoo.me team'

inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.11'
  mongodb-version:
    description: 'MongoDB version to use'
    required: false
    default: '7.0'
  redis-version:
    description: 'Redis version to use'
    required: false
    default: '7.2'
  spoo-directory:
    description: 'Directory to clone spoo.me repository'
    required: false
    default: 'spoo-me'
  wait-timeout:
    description: 'Timeout in seconds to wait for services to start'
    required: false
    default: '120'

outputs:
  service-url:
    description: 'URL where the spoo.me service is running'
    value: 'http://127.0.0.1:8000'
  mongodb-uri:
    description: 'MongoDB connection URI'
    value: 'mongodb://localhost:27017/url-shortener'
  redis-uri:
    description: 'Redis connection URI'
    value: 'redis://localhost:6379'

runs:
  using: 'composite'
  steps:
    - name: 'Display setup information'
      shell: bash
      run: |
        echo "üöÄ Setting up Spoo.me URL Shortener Service"
        echo "üìã Configuration:"
        echo "  - Python version: ${{ inputs.python-version }}"
        echo "  - MongoDB version: ${{ inputs.mongodb-version }}"
        echo "  - Redis version: ${{ inputs.redis-version }}"
        echo "  - Spoo directory: ${{ inputs.spoo-directory }}"
        echo "  - Wait timeout: ${{ inputs.wait-timeout }}s"
        echo ""

    - name: 'Setup Python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: 'Display Python version'
      shell: bash
      run: |
        echo "üêç Python setup complete:"
        python --version
        pip --version

    - name: 'Start MongoDB service'
      uses: supercharge/mongodb-github-action@1.10.0
      with:
        mongodb-version: ${{ inputs.mongodb-version }}
        mongodb-port: 27017

    - name: 'Start Redis service'
      uses: supercharge/redis-github-action@1.7.0
      with:
        redis-version: ${{ inputs.redis-version }}
        redis-port: 6379

    - name: 'Wait for MongoDB to be ready'
      shell: bash
      run: |
        echo "üçÉ Waiting for MongoDB to be ready..."
        
        # Simple approach: wait for port to be available
        timeout=60
        elapsed=0
        
        while [ $elapsed -lt $timeout ]; do
          if python3 -c "import socket; s=socket.socket(); s.settimeout(1); s.connect(('localhost', 27017)); s.close()" 2>/dev/null; then
            echo "‚úÖ MongoDB port 27017 is responding"
            break
          fi
          echo "‚è≥ Waiting for MongoDB... (${elapsed}s/${timeout}s)"
          sleep 2
          elapsed=$((elapsed + 2))
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "‚ùå MongoDB failed to start within ${timeout} seconds"
          echo "üîç Checking what's listening on port 27017..."
          sudo netstat -tlnp | grep 27017 || echo "Port 27017 not found"
          echo "üîç Checking Docker containers..."
          docker ps | grep mongo || echo "No mongo containers found"
          exit 1
        fi
        
        # Give it a moment to fully initialize
        echo "‚è≥ Giving MongoDB extra time to initialize..."
        sleep 5
        echo "‚úÖ MongoDB should be ready!"

    - name: 'Wait for Redis to be ready'
      shell: bash
      run: |
        echo "üî¥ Waiting for Redis to be ready..."
        
        timeout=30
        elapsed=0
        
        while [ $elapsed -lt $timeout ]; do
          if python3 -c "import socket; s=socket.socket(); s.settimeout(1); s.connect(('localhost', 6379)); s.close()" 2>/dev/null; then
            echo "‚úÖ Redis port 6379 is responding"
            break
          fi
          echo "‚è≥ Waiting for Redis... (${elapsed}s/${timeout}s)"
          sleep 1
          elapsed=$((elapsed + 1))
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "‚ùå Redis failed to start within ${timeout} seconds"
          exit 1
        fi
        
        echo "‚úÖ Redis is ready!"

    - name: 'Clone Spoo.me repository'
      shell: bash
      run: |
        echo "üì¶ Cloning Spoo.me repository..."
        if [ -d "${{ inputs.spoo-directory }}" ]; then
          echo "üßπ Removing existing directory"
          rm -rf "${{ inputs.spoo-directory }}"
        fi
        
        git clone https://github.com/spoo-me/url-shortener.git "${{ inputs.spoo-directory }}"
        cd "${{ inputs.spoo-directory }}"
        
        echo "‚úÖ Repository cloned successfully"
        echo "üìÇ Repository structure:"
        ls -la
        
        if [ -f "pyproject.toml" ]; then
          echo "‚úÖ Found pyproject.toml - uv compatible project"
        else
          echo "‚ö†Ô∏è No pyproject.toml found - project structure may vary"
        fi

    - name: 'Install and setup uv'
      shell: bash
      run: |
        echo "üöÄ Installing uv (fast Python package manager)..."
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
        # Reload PATH for current session
        export PATH="$HOME/.cargo/bin:$PATH"
        
        echo "‚úÖ uv installation complete:"
        uv --version

    - name: 'Setup environment configuration'
      shell: bash
      run: |
        echo "‚öôÔ∏è Setting up environment configuration..."
        cd "${{ inputs.spoo-directory }}"
        
        # Create .env file with required configurations
        cat > .env << 'EOF'
        # MongoDB connection details (optimized for single instance)
        MONGODB_URI=mongodb://localhost:27017/url-shortener
        MONGODB_URI_DEV=mongodb://localhost:27017/url-shortener
        MONGO_DB_NAME=url-shortener
        
        # Redis connection details
        REDIS_URI=redis://localhost:6379
        REDIS_URI_DEV=redis://localhost:6379
        REDIS_TTL_SECONDS=3600
        
        # Flask configs
        SECRET_KEY=github-action-secret-key-for-testing
        HOST_URI=127.0.0.1:8000
        SHORTEN_API_RATE_LIMIT_PER_HOUR=100
        
        # Configs for the contact and report forms (empty for local testing)
        CONTACT_WEBHOOK=
        URL_REPORT_WEBHOOK=
        HCAPTCHA_SECRET=
        EOF
        
        echo "‚úÖ Environment configuration created:"
        echo "üìÑ .env file contents:"
        cat .env

    - name: 'Install project dependencies with uv'
      shell: bash
      run: |
        echo "üì¶ Installing project dependencies with uv..."
        cd "${{ inputs.spoo-directory }}"
        
        # Add uv to PATH for this step
        export PATH="$HOME/.cargo/bin:$PATH"
        
        # Install dependencies
        echo "üîÑ Syncing dependencies..."
        uv sync
        
        echo "‚úÖ Dependencies installed successfully"
        
        # Show installed packages
        echo "üìã Installed packages:"
        uv pip list

    - name: 'Verify database services'
      shell: bash
      run: |
        echo "üîç Verifying database services are ready..."
        
        # Test MongoDB port accessibility
        if python3 -c "import socket; s=socket.socket(); s.settimeout(3); s.connect(('localhost', 27017)); s.close()" 2>/dev/null; then
          echo "‚úÖ MongoDB port 27017 is accessible"
        else
          echo "‚ùå MongoDB port 27017 is not accessible"
          echo "üîç Checking MongoDB container status..."
          docker ps | grep mongo || echo "No MongoDB container found"
          exit 1
        fi
        
        # Test Redis port accessibility  
        if python3 -c "import socket; s=socket.socket(); s.settimeout(3); s.connect(('localhost', 6379)); s.close()" 2>/dev/null; then
          echo "‚úÖ Redis port 6379 is accessible"
        else
          echo "‚ùå Redis port 6379 is not accessible"
          echo "üîç Checking Redis container status..."
          docker ps | grep redis || echo "No Redis container found"
          exit 1
        fi
        
        echo "‚úÖ Both database services are ready"
        echo "‚ÑπÔ∏è  Database collections will be created automatically by the spoo.me application"

    - name: 'Start Spoo.me service'
      shell: bash
      run: |
        echo "üöÄ Starting Spoo.me service..."
        cd "${{ inputs.spoo-directory }}"
        
        # Add uv to PATH
        export PATH="$HOME/.cargo/bin:$PATH"
        
        # Start the service in the background
        echo "üîÑ Starting server with uv run..."
        nohup uv run main.py > spoo-service.log 2>&1 &
        SERVICE_PID=$!
        
        echo "üìù Service started with PID: $SERVICE_PID"
        echo $SERVICE_PID > spoo-service.pid
        
        # Wait for service to start
        echo "‚è≥ Waiting for service to start..."
        timeout=${{ inputs.wait-timeout }}
        elapsed=0
        
        while [ $elapsed -lt $timeout ]; do
          if curl -s http://127.0.0.1:8000 >/dev/null 2>&1; then
            echo "‚úÖ Spoo.me service is running and accessible"
            echo "üåê Service URL: http://127.0.0.1:8000"
            break
          fi
          
          # Check if process is still running
          if ! kill -0 $SERVICE_PID 2>/dev/null; then
            echo "‚ùå Service process died. Checking logs..."
            tail -n 20 spoo-service.log
            exit 1
          fi
          
          echo "‚è≥ Waiting for service to respond... (${elapsed}s/${timeout}s)"
          sleep 3
          elapsed=$((elapsed + 3))
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "‚ùå Service failed to start within ${timeout} seconds"
          echo "üìÑ Service logs:"
          tail -n 50 spoo-service.log
          exit 1
        fi

    - name: 'Verify service health'
      shell: bash
      run: |
        echo "üîç Performing service health checks..."
        cd "${{ inputs.spoo-directory }}"
        
        # Test basic connectivity
        echo "üåê Testing basic connectivity..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000)
        if [ "$response" -eq 200 ] || [ "$response" -eq 404 ]; then
          echo "‚úÖ Service is responding (HTTP $response)"
        else
          echo "‚ùå Service health check failed (HTTP $response)"
          exit 1
        fi
        
        # Test database connectivity through the app
        echo "üçÉ Testing database connectivity..."
        if curl -s http://127.0.0.1:8000 | grep -q "spoo.me\|url.*short\|error" 2>/dev/null; then
          echo "‚úÖ Service appears to be running correctly"
        else
          echo "‚ö†Ô∏è Service is running but response may be unexpected"
        fi
        
        # Show final status
        echo ""
        echo "üéâ Spoo.me service setup complete!"
        echo "üìä Service Status:"
        echo "  - Service URL: http://127.0.0.1:8000"
        echo "  - MongoDB: mongodb://localhost:27017/url-shortener (single instance)"
        echo "  - Redis: redis://localhost:6379"
        echo "  - PID: $(cat spoo-service.pid 2>/dev/null || echo 'N/A')"
        echo "  - Total setup time: Fast optimized setup! üöÄ"
        echo ""
        echo "üìÑ Recent service logs:"
        tail -n 10 spoo-service.log 2>/dev/null || echo "No logs available"

branding:
  icon: 'link'
  color: 'blue' 